#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

# fail fast
set -e

# debug
# set -x

# parse and derive params
BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3

LP_DIR=`cd $(dirname $0); cd ..; pwd`

function error() {
  echo " !     $*" >&2
  exit 1
}

function topic() {
  echo "-----> $*"
}

function indent() {
  c='s/^/       /'
  case $(uname) in
    Darwin) sed -l "$c";;
    *)      sed -u "$c";;
  esac
}

BIN_DIR=$BUILD_DIR/.chrome/bin
mkdir -p $BIN_DIR

topic "Looking up latest chrome version"
LATEST=`curl -s https://googlechromelabs.github.io/chrome-for-testing/last-known-good-versions-with-downloads.json`
VERSION=`echo $LATEST | jq -r .channels.Stable.version`
ZIP_URL=`echo $LATEST | jq -r '.channels.Stable.downloads.chrome[] | select(.platform == "linux64") | .url'`
indent "Version $VERSION"

topic "Downloading chrome v$VERSION"
ZIP_LOCATION="/tmp/chrome.zip"
curl -s -o $ZIP_LOCATION $ZIP_URL
unzip -o $ZIP_LOCATION -d $BIN_DIR
mv $BIN_DIR/chrome-linux64/* $BIN_DIR
rm -f $ZIP_LOCATION
indent "Downloaded"

topic "Creating chrome export scripts"
mkdir -p $BUILD_DIR/.profile.d
echo "export PATH=\$PATH:\$HOME/.chrome/bin" >> $BUILD_DIR/.profile.d/chrome.sh
indent "Created"

topic "Creating google-chrome shims"
SHIM=google-chrome-stable
cat <<EOF >$BIN_DIR/$SHIM
#!/usr/bin/env bash

# prevent from any forced shared libraries injection
unset LD_PRELOAD

if [ \$1 = "--version" ]; then
  exec \$HOME/.chrome/bin/chrome --version
elif [ \$1 = "--product-version" ]; then
  exec \$HOME/.chrome/bin/chrome --product-version
else
  exec \$HOME/.chrome/bin/chrome --headless --no-sandbox --disable-gpu --remote-debugging-port=9222 "\$@"
fi
EOF
chmod +x $BIN_DIR/$SHIM
cp $BIN_DIR/$SHIM $BIN_DIR/google-chrome

# export the chrome binary location, so it's easier to tell chromedriver
# about the non-standard location
cat <<EOF >$BUILD_DIR/.profile.d/010_google-chrome.sh
export GOOGLE_CHROME_BIN="\$HOME/.chrome/bin/chrome"
export GOOGLE_CHROME_SHIM="\$HOME/.chrome/bin/google-chrome-stable"
EOF

topic "Injecting Chrome dependencies to Aptfile"
PACKAGES="
  gconf-service
  libappindicator1
  libasound2
  libatk1.0-0
  libatk-bridge2.0-0
  libcairo-gobject2
  libdrm2
  libgbm1
  libgconf-2-4
  libgtk-3-0
  libnspr4
  libnss3
  libx11-xcb1
  libxcb-dri3-0
  libxcomposite1
  libxcursor1
  libxdamage1
  libxfixes3
  libxi6
  libxinerama1
  libxrandr2
  libxshmfence1
  libxss1
  libxtst6
  fonts-liberation
"

echo $PACKAGES >> $BUILD_DIR/Aptfile
